import pytest
from fastapi.testclient import TestClient
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.pool import StaticPool
import os
import sys
import uuid
from datetime import datetime, timedelta

# Add the parent directory to sys.path to allow imports
parent_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
sys.path.insert(0, parent_dir)

# Patch the environment for testing
os.environ["DATABASE_URL"] = "sqlite:///:memory:"
os.environ["JWT_SECRET"] = "test_secret_key"
os.environ["JWT_ALGORITHM"] = "HS256"
os.environ["ACCESS_TOKEN_EXPIRE_MINUTES"] = "30"
os.environ["RESET_TOKEN_EXPIRE_MINUTES"] = "15"

# Import after setting environment variables
from app.database import Base, get_db_session
from app.models import User, RefreshToken, ResetToken
from app import services

# Import the app from the root directory
sys.path.insert(0, os.path.join(parent_dir))
from app import app

# Create an in-memory SQLite database for testing
SQLALCHEMY_DATABASE_URL = "sqlite:///:memory:"
engine = create_engine(
    SQLALCHEMY_DATABASE_URL,
    connect_args={"check_same_thread": False},
    poolclass=StaticPool,
)
TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Create tables in the test database
Base.metadata.create_all(bind=engine)


# Override the get_db dependency in the app
def override_get_db():
    db = TestingSessionLocal()
    try:
        yield db
    finally:
        db.close()


app.dependency_overrides[get_db_session] = override_get_db


@pytest.fixture
def client():
    """Return a TestClient instance for testing the API endpoints."""
    return TestClient(app)


@pytest.fixture
def db_session():
    """Return a testing database session."""
    db = TestingSessionLocal()
    try:
        yield db
    finally:
        db.close()


@pytest.fixture
def test_user(db_session):
    """Create a test user and return it."""
    user = services.create_user(db_session, "test@example.com", "testpassword", "Test User")
    return user


@pytest.fixture
def test_refresh_token(db_session, test_user):
    """Create a test refresh token and return it."""
    refresh_token = services.create_refresh_token(db_session, test_user.id)
    return refresh_token


@pytest.fixture
def test_reset_token(db_session, test_user):
    """Create a test reset token and return it."""
    reset_token = services.create_password_reset_token(db_session, test_user.id)
    return reset_token


@pytest.fixture
def auth_headers(test_user, db_session):
    """Create authentication headers with a valid JWT token."""
    access_token = services.create_access_token(
        data={"sub": test_user.email, "user_id": str(test_user.id)}
    )
    return {"Authorization": f"Bearer {access_token}"} 