openapi: 3.0.0
info:
  title: CandidateV Authentication Service API
  version: 1.0.0
  description: API for user authentication and token management
  contact:
    name: CandidateV Support
    email: support@candidatev.com

servers:
  - url: http://localhost:8000
    description: Local development server
  - url: https://{auth_service_url}
    description: Production server
    variables:
      auth_service_url:
        default: auth-service.candidatev.com

components:
  schemas:
    UserCreate:
      type: object
      required:
        - email
        - password
        - name
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: john.doe@example.com
        password:
          type: string
          format: password
          minLength: 8
          description: User's password
          example: securepassword123
        name:
          type: string
          description: User's full name
          example: John Doe

    UserResponse:
      type: object
      required:
        - id
        - email
        - name
        - created_at
      properties:
        id:
          type: string
          format: uuid
          description: User's unique identifier
          example: 123e4567-e89b-12d3-a456-426614174000
        email:
          type: string
          format: email
          description: User's email address
          example: john.doe@example.com
        name:
          type: string
          description: User's full name
          example: John Doe
        created_at:
          type: string
          format: date-time
          description: Timestamp when the user was created
          example: 2023-01-01T00:00:00Z

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: john.doe@example.com
        password:
          type: string
          format: password
          description: User's password
          example: securepassword123

    TokenResponse:
      type: object
      required:
        - access_token
        - refresh_token
        - token_type
        - expires_in
      properties:
        access_token:
          type: string
          description: JWT access token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refresh_token:
          type: string
          description: JWT refresh token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        token_type:
          type: string
          enum: [bearer]
          description: Type of token
          example: bearer
        expires_in:
          type: integer
          description: Token expiration in seconds
          example: 1800

    RefreshRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
          description: JWT refresh token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    LogoutRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
          description: JWT refresh token to invalidate
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    MessageResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Response message
          example: Successfully logged out

    HealthResponse:
      type: object
      required:
        - status
        - timestamp
        - version
        - database_connection
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
          description: Service health status
          example: healthy
        timestamp:
          type: string
          format: date-time
          description: Current timestamp
          example: 2023-01-01T00:00:00Z
        version:
          type: string
          description: Service version
          example: 1.0.0
        database_connection:
          type: string
          enum: [ok, error]
          description: Database connection status
          example: ok

    ErrorResponse:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: string
          enum: [error]
          description: Error status
          example: error
        message:
          type: string
          description: Error message
          example: Invalid credentials
        code:
          type: string
          description: Error code
          example: INVALID_CREDENTIALS
        requestId:
          type: string
          description: Request ID for tracing
          example: 123e4567-e89b-12d3-a456-426614174000

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token authentication

paths:
  /:
    get:
      summary: Root endpoint
      description: Returns basic service information
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: CandidateV Authentication Service

  /api/health:
    get:
      summary: Health check
      description: Check service health status
      tags:
        - Health
      responses:
        '200':
          description: Service health information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /api/auth/register:
    post:
      summary: Register a new user
      description: Create a new user account
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/login:
    post:
      summary: User login
      description: Authenticate user and get access token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/refresh:
    post:
      summary: Refresh token
      description: Get a new access token using refresh token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/logout:
    post:
      summary: User logout
      description: Invalidate the refresh token
      tags:
        - Authentication
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutRequest'
      responses:
        '200':
          description: Logged out successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/verify:
    get:
      summary: Verify token
      description: Verify the JWT token and get user information
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                type: object
                required:
                  - user_id
                  - email
                  - expires_at
                properties:
                  user_id:
                    type: string
                    format: uuid
                    description: User's unique identifier
                    example: 123e4567-e89b-12d3-a456-426614174000
                  email:
                    type: string
                    format: email
                    description: User's email address
                    example: john.doe@example.com
                  expires_at:
                    type: string
                    format: date-time
                    description: Token expiration timestamp
                    example: 2023-01-01T00:30:00Z
        '401':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/forgot-password:
    post:
      summary: Request password reset
      description: Sends a password reset token to the user's email
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
      responses:
        '200':
          description: Password reset instructions sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: If your email is registered, you will receive a password reset link
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/auth/reset-password:
    post:
      summary: Reset password
      description: Reset user password using the token received via email
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - new_password
              properties:
                token:
                  type: string
                  description: Reset token received via email
                new_password:
                  type: string
                  format: password
                  minLength: 8
                  description: New password to set
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password has been reset successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError' 